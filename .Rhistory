'colsample_bytree' = c(0.8,0.8,1,1),
'min_child_weight' = c(0,0,1,1),
'subsample' = 0.8)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = 36, horizon = 12, fixedWindow = TRUE)
timeSlices
timeSlices$train
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = 50, horizon = 24, fixedWindow = TRUE)
timeSlices$train
timeSlices$train$Training0050
timeSlices$train$Training0051
timeSlices$test$Testing0050
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = TRUE)
timeSlices$train$Training7557
tail(bike[timeSlices$train$Training7557,])
tail(bike[timeSlices$train$Testing7557,])
tail(bike[timeSlices$test$Testing7557,])
tail(bike[timeSlices$test$Testing7557,],1)
tail(bike[timeSlices$train$Training7557,],1)
timeSlices$test$Testing7557
head(bike[timeSlices$test$Testing7557,],1)
tail(bike[timeSlices$train$Training8736,],1)
head(bike[timeSlices$test$Testing8736,],1)
tail(bike[timeSlices$train$Training8004,],1)
tail(bike[timeSlices$train$Training7557,],1)
tail(bike[timeSlices$train$Training7558,],1)
bike[timeSlices$test$Testing7558,]
tail(bike[timeSlices$test$Testing7558,],1)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = TRUE, skip = 24)
tail(bike[timeSlices$train$Training8736,],1)
timeSlices$train$Training7632
tail(bike[timeSlices$train$Training7632,],1)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = F)
tail(bike[timeSlices$train$Training7632,],1)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = F)
tail(bike[timeSlices$train$Training7632,],1)
tail(bike[timeSlices$train$Training7563,],1)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T)
length(timeSlices)
length(timeSlices[[1]])
length(timeSlices$train)
ndays <- nrow(bikets)/24
days_for_cv <- 50
bikes_train <- stretch_tsibble(bikets,
.step = 24,
.init = nrow(bikets)-(days_for_cv*24)-3,
.id = "fold") %>%
filter(fold <= 50)
bikes_test <- new_data(bikes_train, n = 27) %>%
inner_join(bikets, by = "Hour")
View(bikes_train)
View(bikes_test)
length(timeSlices$test)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T, skip = 24 * 50)
length(timeSlices$test)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T)
length(timeSlices$test$Testing7557)
length(timeSlices$test$Testing7558)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T)
length(timeSlices$test$Testing7558)
timeSlices$test$Testing7558
View(bikes_test)
1028/24
1350/24
bikes_train <- stretch_tsibble(bikets,
.step = 24,
.init = nrow(bikets)-(days_for_cv*24)-3,
.id = "fold")
View(bikes_test)
bikes_test <- new_data(bikes_train, n = 27) %>%
inner_join(bikets, by = "Hour")
bike = slice(bike, 1:n() - 3) # drop last 3 rows since we're not using those. (Similar to Fold 51 in create_cv_folds.R)
bike = slice(bike, 1:(n() - 3)) # drop last 3 rows since we're not using those. (Similar to Fold 51 in create_cv_folds.R)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T)
1353/24
1350/24
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T)
timeSlices$test$Testing7554
timeSlices$test$Testing7555
bike[timeSlices$test$Testing7555,]
bike[timeSlices$test$Testing7558,]
length(timeSlices$train)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T, skip = 500)
length(timeSlices$train)
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T, skip = 24)
length(timeSlices$train)
bike[timeSlices$test$Testing7554,]
bike[timeSlices$test$Testing7579,]
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24)-3, horizon = 24, fixedWindow = T, skip = 23)
bike[timeSlices$test$Testing7579,]
bike[timeSlices$test$Testing7554,]
bike[timeSlices$test$Testing7578,]
timeSlices <- createTimeSlices(1:nrow(bike),
initialWindow = nrow(bike)-(50*24), horizon = 24, fixedWindow = T, skip = 23)
bike[timeSlices$test$Testing7578,]
bike[timeSlices$test$Testing7557,]
bike[timeSlices$train$Training7557]
bike[timeSlices$train$Training7557,]
tail(bike[timeSlices$train$Training7557,],1)
tail(bike[timeSlices$train$Training7581,],1)
length(filter(bike$BikeCount ==NA))
count(is.na(bike))
anyNA(bike)
bike <- readr::read_csv("SeoulBikeData.csv",
col_names = c("Date",
"BikeCount",
"Hour",
"Temperature",
"Humidity",
"WindSpeed",
"Visibility",
"Dewpoint",
"SolarRadiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"FunctionalDay"),
skip = 1,
col_types = cols("Hour" = col_time(format = "%H"),
Seasons = "f",
Holiday = "f",
FunctionalDay = "f"))
bike$Hour = hour(bike$Hour)
# drop last 3 rows since we're not using those. (Similar to Fold 51 in create_cv_folds.R)
bike = slice(bike, 1:(n() - 3))
# Extract features from date
bike$Day = factor(format(bikets$Hour, "%d"))
bike$Month = factor(months(bikets$Hour, abbreviate= T))
bike$WeekDay = factor(wday(bikets$Hour, label =T, week_start = 1), ordered = F)
bike <- readr::read_csv("SeoulBikeData.csv",
col_names = c("Date",
"BikeCount",
"Hour",
"Temperature",
"Humidity",
"WindSpeed",
"Visibility",
"Dewpoint",
"SolarRadiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"FunctionalDay"),
skip = 1,
col_types = cols("Hour" = col_time(format = "%H"),
Seasons = "f",
Holiday = "f",
FunctionalDay = "f"))
bike$Hour = hour(bike$Hour)
# Extract features from date
bike$Day = factor(format(bikets$Hour, "%d"))
bike$Month = factor(months(bikets$Hour, abbreviate= T))
bike$WeekDay = factor(wday(bikets$Hour, label =T, week_start = 1), ordered = F)
# drop last 3 rows since we're not using those. (Similar to Fold 51 in create_cv_folds.R)
bike = slice(bike, 1:(n() - 3))
# Convert BikeCount = 0 to NA and drop FunctionalDay Feature
bike = bike %>%
mutate(BikeCount = ifelse(BikeCount == 0, NA, BikeCount))%>%
select(-FunctionalDay)
anyNA(bike)
?lapply
sum(is.na(bike$BikeCount))
length(BikeCount)
bike = bike %>%
mutate(Humidity = ifelse(Humidity == 0, NA, Humidity))%>% # convert 0 to NA before imputing
select(Humidity) %>%
preProcess(method='knnImpute') %>% # Note that this automatically centers and scales Humidity
predict(newdata = bike)
bike %>%
mutate(Humidity = ifelse(Humidity == 0, NA, Humidity))%>% # convert 0 to NA before imputing
select(Humidity)
bike = bike %>%
mutate(Humidity = ifelse(Humidity == 0, NA, Humidity))%>% # convert 0 to NA before imputing
select(Humidity) %>%
preProcess(method='knnImpute') %>% # Note that this automatically centers and scales Humidity
predict(newdata = bike)
bike = bike %>%
mutate(Humidity = ifelse(Humidity == 0, NA, Humidity))%>% # convert 0 to NA before imputing
select(Humidity) %>%
preProcess(method='knnImpute') %>% # Note that this automatically centers and scales Humidity
predict(newdata = bike$Humidity)
bike = bike %>%
mutate(Humidity = ifelse(Humidity == 0, NA, Humidity))%>% # convert 0 to NA before imputing
select(Humidity) %>%
preProcess(method='knnImpute') %>% # Note that this automatically centers and scales Humidity
predict(newdata = bike)
x1 = runif(100)
x2 = rnorm(100)
y= 5 + 3*x1 + 6*x2
y[c(20:60)]= NA
x55 = cbind(x1,x2)
train(x55, y,
method= "lm",
trControl = trainControl(method = "cv"))
bike <- readr::read_csv("SeoulBikeData.csv",
col_names = c("Date",
"BikeCount",
"Hour",
"Temperature",
"Humidity",
"WindSpeed",
"Visibility",
"Dewpoint",
"SolarRadiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"FunctionalDay"),
skip = 1,
col_types = cols("Hour" = col_time(format = "%H"),
Seasons = "f",
Holiday = "f",
FunctionalDay = "f"))
sum(bike$BikeCount==0) # 295 NAs
bike$Hour = hour(bike$Hour)
# Correct for skewness for PCA purposes
quantData = bike %>%
select_if(is.numeric)
skewnessVec = quantData %>% sapply(., e1071::skewness)
skewnessCriterion = abs(skewnessVec)> 1
quantDataSkewedYJ = quantData %>%
select_if(skewnessCriterion) %>%
preProcess(method = 'YeoJohnson') %>%
predict(quantData %>% select_if(skewnessCriterion)) # apply Yeo-Johnson transformation
quantDataNotSkewed = quantData %>%
select_if(!skewnessCriterion)
quantDataCombined = cbind(quantDataSkewedYJ, quantDataNotSkewed)
# start PCA
bikeCountPCA = prcomp(quantDataCombined,scale=TRUE,center=TRUE)
XtransformPC = data.frame(bikeCountPCA$x)
screeplot(bikeCountPCA,type='lines') # First two PCs are informative
ggplot(data = XtransformPC, aes(x = PC1, y = PC2)) +
geom_point() +
coord_cartesian(xlim = c(-7,7), ylim = c(-7,7))+
ggtitle("Summarizing via PCA")
# Extreme observations
filter(bike,XtransformPC$PC1 == min(XtransformPC$PC1)) # Bike Count v low, v high Humidity, v low Visibility
filter(bike,XtransformPC$PC2 == max(XtransformPC$PC2))
# Extract features from date
bike$Day = factor(format(bikets$Hour, "%d"))
bike$Month = factor(months(bikets$Hour, abbreviate= T))
bike$WeekDay = factor(wday(bikets$Hour, label =T, week_start = 1), ordered = F)
# drop last 3 rows since we're not using those. (Similar to Fold 51 in create_cv_folds.R)
bike = slice(bike, 1:(n() - 3))
bike = bike %>%
mutate(Humidity = ifelse(Humidity == 0, NA, Humidity))%>% # convert 0 to NA before imputing
select(Humidity) %>%
preProcess(method='knnImpute') %>% # Note that this automatically centers and scales Humidity
predict(newdata = bike)
myTuneGrid = data.frame('nrounds'=c(200,500), #grid still needs tuning
'max_depth'= 4,
'eta' = 0.01,
'gamma' = c(0,0.1),
'colsample_bytree' = 0.8,
'min_child_weight' = 1,
'subsample' = 0.8)
```{r}
myTuneGrid = data.frame('nrounds'=c(200,500), #grid still needs tuning
'max_depth'= 4,
'eta' = 0.01,
'gamma' = c(0,0.1),
'colsample_bytree' = 0.8,
'min_child_weight' = 1,
'subsample' = 0.8)
myTrainControl = trainControl(method="timeslice",
initialWindow = nrow(bike)-(50*24),
horizon = 24,
skip = 23,
fixedWindow = TRUE)
boostOut = train(x = bike %>% select(-c(Date,BikeCount)), y = bike$BikeCount,
method = "xgbTree",
tuneGrid = myTuneGrid,
trcontrol = myTrainControl,
verbose = F)
boostOut$bestTune
boostOut$results
#sanity check
#timeSlices <- createTimeSlices(1:nrow(bike),
#                   initialWindow = nrow(bike)-(50*24), horizon = 24, fixedWindow = T, skip = 23)
#tail(bike[timeSlices$train$Training7581,],1)
#bike[timeSlices$test$Testing7557,]
```
myTuneGrid = data.frame('nrounds'=c(200,500), #grid still needs tuning
'max_depth'= 4,
'eta' = 0.01,
'gamma' = c(0,0.1),
'colsample_bytree' = 0.8,
'min_child_weight' = 1,
'subsample' = 0.8)
myTrainControl = trainControl(method="timeslice",
initialWindow = nrow(bike)-(50*24),
horizon = 24,
skip = 23,
fixedWindow = TRUE)
boostOut = train(x = bike %>% select(-c(Date,BikeCount)), y = bike$BikeCount,
method = "xgbTree",
tuneGrid = myTuneGrid,
trcontrol = myTrainControl,
verbose = F)
anyNA(bike)
yneu = bike$BikeCount
xneu = bike %>% select(-c(Date,BikeCount))
unclass(bike$Month)
lapply(bike, is.factor)
lapply(bike, is.factor)[]
lapply(bike, is.factor)[[]]
bike$lapply(bike, is.factor)
unlist(lapply(bike, is.factor))
bike %>%
select_if(is.factor)%>%
unlist(.)
bike %>%
select_if(is.factor)
?unclas
?unclass
bike %>%
select_if(is.factor)%>%
mutate_all(unlist)
bike %>%
select_if(is.factor)%>%
mutate_all(unlist())
bike %>%
select_if(is.factor)%>%
sapply(unclass)
bike = bike %>%
select_if(is.factor)%>%
sapply(unclass)
bike <- readr::read_csv("SeoulBikeData.csv",
col_names = c("Date",
"BikeCount",
"Hour",
"Temperature",
"Humidity",
"WindSpeed",
"Visibility",
"Dewpoint",
"SolarRadiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"FunctionalDay"),
skip = 1,
col_types = cols("Hour" = col_time(format = "%H"),
Seasons = "f",
Holiday = "f",
FunctionalDay = "f"))
?data.matrix
bike[sapply(bike, is.factor)]
# Extract features from date
bike$Day = factor(format(bikets$Hour, "%d"))
bike$Month = factor(months(bikets$Hour, abbreviate= T))
bike$WeekDay = factor(wday(bikets$Hour, label =T, week_start = 1), ordered = F)
# drop last 3 rows since we're not using those. (Similar to Fold 51 in create_cv_folds.R)
bike = slice(bike, 1:(n() - 3))
bike[sapply(bike, is.factor)] <- data.matrix(bike[sapply(bike, is.factor)])
bike$Hour = hour(bike$Hour)
bike$Hour = as.factor(bike$Hour)
#convert categorical data to numeric values
bike[sapply(bike, is.factor)] <- as.factor(data.matrix(bike[sapply(bike, is.factor)]))
bike$WeekDay = factor(wday(bikets$Hour, label =F, week_start = 1), ordered = F)
bike <- readr::read_csv("SeoulBikeData.csv",
col_names = c("Date",
"BikeCount",
"Hour",
"Temperature",
"Humidity",
"WindSpeed",
"Visibility",
"Dewpoint",
"SolarRadiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"FunctionalDay"),
skip = 1,
col_types = cols("Hour" = col_time(format = "%H"),
Seasons = "f",
Holiday = "f",
FunctionalDay = "f"))
bike$Hour = hour(bike$Hour)
bike$Hour = as.factor(bike$Hour)
# Extract features from date
bike$Day = factor(format(bikets$Hour, "%d"))
View(bike)
bike$Month = factor(months(bikets$Hour, abbreviate= T))
bike$WeekDay = factor(wday(bikets$Hour, label =F, week_start = 1), ordered = F)
?months
#
bike = sapply(c(bike$Seasons, bike$Holiday, bike$FunctionalDay, bike$Day, bike$Month, bike$WeekDay), unlist)
bike <- readr::read_csv("SeoulBikeData.csv",
col_names = c("Date",
"BikeCount",
"Hour",
"Temperature",
"Humidity",
"WindSpeed",
"Visibility",
"Dewpoint",
"SolarRadiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"FunctionalDay"),
skip = 1,
col_types = cols("Hour" = col_time(format = "%H"),
Seasons = "f",
Holiday = "f",
FunctionalDay = "f"))
bike$Hour = hour(bike$Hour)
bike$Hour = as.factor(bike$Hour)
# Extract features from date
bike$Day = factor(format(bikets$Hour, "%d"))
bike$Month = factor(months(bikets$Hour, abbreviate= T))
bike$WeekDay = factor(wday(bikets$Hour, label =F, week_start = 1), ordered = F)
# drop last 3 rows since we're not using those. (Similar to Fold 51 in create_cv_folds.R)
bike = slice(bike, 1:(n() - 3))
sapply(c(bike$Seasons, bike$Holiday, bike$FunctionalDay, bike$Day, bike$Month, bike$WeekDay), unclass)
#
bike[,c(bike$Seasons, bike$Holiday, bike$FunctionalDay, bike$Day, bike$Month, bike$WeekDay)] = sapply(c(bike$Seasons, bike$Holiday, bike$FunctionalDay, bike$Day, bike$Month, bike$WeekDay), unclass)
bike[,c("Seasons", "Holiday")] = sapply(bike[,"Seasons","Holiday"], unclass)
bike[,c("Seasons", "Holiday")] = sapply(bike[,c("Seasons","Holiday")], unclass)
#
bike[,c("Seasons", "Holiday", "FunctionalDay", "Day", "Month", "WeekDay")] = sapply(bike[,c("Seasons", "Holiday", "FunctionalDay", "Day", "Month", "WeekDay")], unclass)
#
factors = c("Seasons", "Holiday", "FunctionalDay", "Day", "Month", "WeekDay")
bike[,factors] <- lapply(bike[,factors], as.factor)
bike <- readr::read_csv("SeoulBikeData.csv",
col_names = c("Date",
"BikeCount",
"Hour",
"Temperature",
"Humidity",
"WindSpeed",
"Visibility",
"Dewpoint",
"SolarRadiation",
"Rainfall",
"Snowfall",
"Seasons",
"Holiday",
"FunctionalDay"),
skip = 1,
col_types = cols("Hour" = col_time(format = "%H"),
Seasons = "f",
Holiday = "f",
FunctionalDay = "f"))
X = select_if(bike, is.numeric)
Y = select(bike, BikeCount) %>% unlist()
bike$Hour = as.factor(bike$Hour)
# Correct for skewness for PCA purposes
quantData = bike %>%
select_if(is.numeric)
skewnessVec = quantData %>% sapply(., e1071::skewness)
skewnessCriterion = abs(skewnessVec)> 1
quantDataSkewedYJ = quantData %>%
select_if(skewnessCriterion) %>%
preProcess(method = 'YeoJohnson') %>%
predict(quantData %>% select_if(skewnessCriterion)) # apply Yeo-Johnson transformation
quantDataNotSkewed = quantData %>%
select_if(!skewnessCriterion)
quantDataCombined = cbind(quantDataSkewedYJ, quantDataNotSkewed)
# start PCA
bikeCountPCA = prcomp(quantDataCombined,scale=TRUE,center=TRUE)
XtransformPC = data.frame(bikeCountPCA$x)
screeplot(bikeCountPCA,type='lines') # First two PCs are informative
ggplot(data = XtransformPC, aes(x = PC1, y = PC2)) +
geom_point() +
coord_cartesian(xlim = c(-7,7), ylim = c(-7,7))+
ggtitle("Summarizing via PCA")
# Extreme observations
filter(bike,XtransformPC$PC1 == min(XtransformPC$PC1)) # Bike Count v low, v high Humidity, v low Visibility
range(XtransformPC$PC1)
range(XtransformPC$PC2)
min(XtransformPC$PC1,XtransformPC$PC2)
?train
xneu = bike %>% select(-c(Date,BikeCount))
yneu = bike$BikeCount
XQual = select_if(xneu, is.factor)
dummyModel = dummyVars(~., data = XQual, fullRank=TRUE)
XQualDummy = predict(dummyModel, XQual)
XFull = cbind(XQualDummy, xneu[,-XQual])
XFull = cbind(XQualDummy, xneu[,-c(names(XQual)])
XFull = cbind(XQualDummy, xneu[,-c(names(XQual))])
XFull = cbind(XQualDummy, xneu[,-names(XQual)])
XQual
XQuan = bike %>% select(-names(XQual))
XFull = cbind(XQualDummy, xQuan)
XQuan = bike %>% select(-names(XQual))
XFull = cbind(XQualDummy, xQuan)
XQuan = bike %>% select(-c(names(XQual),Date,BikeCount))
XFull = cbind(XQualDummy, xQuan)
XFull = cbind(XQualDummy, XQuan)
